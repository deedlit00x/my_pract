# Задача 1. Календарь

# Мы продолжаем разрабатывать удобный календарь для смартфона. Функцию определения високосного года мы добавили, но забыли ещё много разных очевидных вещей.

# Напишите программу, которая принимает от пользователя день недели в виде строки и выводит его номер на экран.

# Пример:

# Введите день недели: вторник
# Номер дня недели: 2

# print('Задача 1. Календарь\n')

# user_text = input('Введите день недели: ')
# result = 0

# if user_text == 'Понедельник' or user_text == 'понедельник':
#   result += 1
# elif user_text == 'Вторник' or user_text == 'вторник':
#   result += 2
# elif user_text == 'Среда' or user_text == 'среда':
#   result += 3
# elif user_text == 'Четверг' or user_text == 'четверг':
#   result += 4
# elif user_text == 'Пятница' or user_text == 'пятница':
#   result += 5
# elif user_text == 'Суббота' or user_text == 'суббота':
#   result += 6
# elif user_text == 'Воскресенье' or user_text == 'Воскресенье':
#   result += 7
# else:
#   print('Вы ошиблись!')

# print('Номер дня недели:', result)

# Задача 2. Я стал новым пиратом!

# Старому капитану необходимо пополнить команду. Но попадут на его корабль только достойные! Он отобрал 10 человек и те, кто из них крикнет слово “Карамба”, попадут на борт.

# Пользователь вводит 10 слов. Напишите программу, которая определяет, сколько из них совпадают со словом “Карамба”.

# print('Задача 2. Я стал новым пиратом!\n')

# result = 0
# i = 0

# for i in range(10):
#   user_text = input('Введите слово: ')
#   i += 1
#   if user_text == 'Карамба' or user_text == 'карамба':
#     result += 1
#     print('Ты с нами!')
#   else:
#     print('этот мимо')
    
# print('Взяли на борт: {} пиратов'.format(result))

# Задача 3. Кривой мессенджер

# При передаче сообщений в одном мессенджере иногда возникают неполадки и в сообщение попадает лишний символ - звёздочка. Пользователям это изрядно надоело, и они начали просто уходить в другие мессенджеры. Хотя одному пользователю стало интересно, на каких обычно позициях появляется эта звёздочка.



# Пользователь вводит строку, в которой встречается символ “*” ровно один раз. Напишите программу, которая определяет порядковый номер этого символа в строке.

# Пример:

# Введите текст: Пр*ивет как дела
# Символ ‘*’ стоит на позиции 3

# print('Задача 3. Кривой мессенджер\n')

# text = input('Введите текст: ')
# symb = '*'
# count = 1

# for symbol in text:
#   if symbol != '*':
#     count += 1
#   else:
#     print('Символ {} стоит на позиции {}'.format(symb, count))
#     break
    

# Задача 4. Театр

# Планируется построить театр под открытым небом, но для начала нужно хотя бы примерно понять сколько должно быть рядов, сидений в них и какое лучше сделать расстояние между рядами.

# Напишите программу, которая получает на вход кол-во рядов, сидений и свободных метров между рядами, а затем выводит примерный макет театра на экран.

# print('Задача 4. Театр\n')

# row = int(input('Введите кол-во рядов: '))
# loc = int(input('Введите кол-во сидений в ряде: '))
# dist = int(input('Введите кол-во метров между рядами: '))
# symb_a = '='
# symb_b = '*'

# print('\nСцена\n')
# for num in range(row):
#   print(symb_a * loc, symb_b * dist, symb_a * loc)

# Задача 5. Марсоход 2

# К роботу Валли отправили ещё одного робота Билли. Это его первый поход на Марс, поэтому он тестируется в прямоугольном помещении размером 15 на 20 метров. Марсоход высаживается в центре комнаты (в точке 8, 10), после чего управление им передаётся оператору - пользователю вашей программы. Программа спрашивает в какую сторону оператор хочет направить робота: север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D). Оператор делает выбор, марсоход перемещается на 1 метр в эту сторону и программа сообщает новую позицию марсохода. Если марсоход упёрся в стену, то он не должен пытаться перемещаться в сторону стены, в этом случае его позиция не меняется.

# Пример:

# [Программа]: Марсоход находится на позиции 6, 19, введите команду:
# [Оператор]: A
# [Программа]: Марсоход находится на позиции 5, 19, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:

# print('Задача 5. Марсоход 2\n')

# status = 'run'
# pos_x = 0
# pos_y = 0
# x_min = 0
# x_max = 20
# y_min = 0
# y_max = 15

# print('Введите направление для марсохода - \nсевер (клавиша W), юг (клавиша S), запад (клавиша A) или \nвосток (клавиша D), stop - для завершения: ')
# while status == 'run':
#   choiсe = input('[Программа]: Введите команду: ')
#   print('[Оператор]: ',choiсe)
#   if choiсe == 'W' or choiсe == 'w':
#     if pos_y == y_max :
#       print('[Программа]: Вы уперлись в стену')
#     else:
#       pos_y += 1
#       print('[Программа]: Марсоход находится на позиции {}, {}'.format(pos_x, pos_y))
#   elif choiсe == 'S' or choiсe == 's':
#     if pos_y == y_min:
#       print('[Программа]: Вы уперлись в стену')
#     else:
#       pos_y -= 1
#       print('[Программа]: Марсоход находится на позиции {}, {}'.format(pos_x, pos_y))
#   elif choiсe == 'D' or choiсe == 'd':
#     if pos_x == x_max:
#       print('[Программа]: Вы уперлись в стену')
#     else:
#       pos_x += 1
#       print('[Программа]: Марсоход находится на позиции {}, {}'.format(pos_x, pos_y))
#   elif choiсe == 'A' or choiсe == 'a':
#     if pos_x == x_min:
#       print('[Программа]: Вы уперлись в стену')
#     else:
#       pos_x -= 1
#       print('[Программа]: Марсоход находится на позиции {}, {}'.format(pos_x, pos_y))
#   elif choiсe == 'stop':
#     status = 'stop'
#     print('[Программа]: Марсоход остановлен')
#   else:
#     print('[Программа]: Вы ввели неправильную команду, повторите ввод!')

# Задача 6. Спецшифр

# Два сотрудника спецслужб переписываются необычным шифром. Каждую букву они шифруют в виде строки, внутри которой есть длинная последовательность букв “s”, а длина самой длинной - это и есть номер буквы алфавита, которую хотят отправить.

# Напишите программу, которая получает на вход строку, подсчитывает в ней самую длинную последовательность подряд идущих букв “s” и выводит ответ на экран.

# Пример:

# Введите строку: ssbbbsssbc
# Самая длинная последовательность: 3

# print('Задача 6. Спецшифр\n')

# text = input('Введите строку: ')

# # text  = 'ssbbbsssbcssss'
# count = 0
# result = 0

# for symbol in (text + ' '):
#   if symbol == 's':
#     count += 1
#     print(count)
#   elif symbol != 's':
#     if count > result:
#       result, count = count, 0
#       print(result)
#     else:
#       count = 0


# print('Самая длинная последовательность: ', result) 

# Задача 7. Великий и могучий

# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку. Особенно Паоло понравилась книга “Преступление и наказание”. И ему стало интересно, какое можно найти самое длинное слово в этой книге, чтобы потом сравнить его с аналогом на своём языке.

# Напишите программу, которая получает на вход текст и находит длину самого длинного слова в нём. Слова в тексте разделяются одним пробелом.

# Пример:

# Введите текст: Меня зовут Петр
# Длина самого длинного слова: 5

# print('Задача 7. Великий и могучий\n')

# text  = 'Менпп зов Петhjddd'
# max_len = 0
# temp = ''
# for symbol in (text + ' '):
#   if symbol != ' ':
#     temp += symbol
#   elif symbol == ' ':
#     if max_len < len(temp):
#       max_len = len(temp)
#       temp = ''
#     else:
#       temp = ''
  

# print('Длина самого длинного слова: ', max_len)


# Задача 8. Колонтитул

# Нам нужно написать программу для печати важных объявлений. Сверху объявления должен располагаться вот такой колонтитул:

# Восклицательные знаки всегда располагаются по центру строки, причём в зависимости от важности объявления количество восклицательных знаков может быть разным. Напишите программу, которая спрашивает у пользователя сначала общую длину колонтитула в символах, потом желаемое количество восклицательных знаков, после чего выводит на экран готовую строку.

# print('Задача 8. Колонтитул\n')

# sym_a = '~'
# sym_b = '!'
# result = ''
# user_len = int(input('Введите общую длину колонтитула в символах: '))
# user_sym = int(input('Введите желаемое количество восклицательных знаков: '))
# tmp = ((user_len - user_sym) // 2)

# if user_sym % 2 != 0 or user_len % 2 != 0:
#   print((sym_a * tmp) + (sym_b * user_sym) + (sym_a * (tmp - 1)))
# else:
#   print((sym_a * tmp) + (sym_b * user_sym) + (sym_a * tmp))


# Задача 9. Коровы

# Для коров есть 10 стойл. В каждом стойле разные условия для животных, поэтому и молока они дают по-разному. В первом стойле производят 2 литра в день, во втором 4, в третьем - 6, потом 8, 10, 12, 14, 16, 18, 20. Но коровы стоят не во всех стойлах. Свободные и занятые обозначаются строкой из букв a и b, где a - свободное стойло, b - занятое.

# Пользователь вводит строку из 10 символов a и b. Необходимо определить, сколько в итоге будет произведено молока за день.
# print('Задача 9. Коровы\n')

# user_inp = input('Введите строку из 10 символов a и b: ')
# count = 0

# for symbol in user_inp:
#   if symbol == 'b':
#     count += 2

# print('произведено молока за день: ', count)

# Задача 10. Метод бутерброда

# Секретное агентство «Super-Secret-no» решило для шифрования переписки своих сотрудников использовать «метод бутерброда». Сначала буквы слова нумеруются в таком порядке: первая буква получает номер 1, последняя буква - номер 2, вторая – номер 3, предпоследняя – номер 4, потом третья … и так для всех букв (см. рисунок). Затем все буквы записываются в шифр в порядке своих номеров.

# Например, слово «sandwich» зашифруется в «shacnidw».

# К сожалению, программист «Super-Secret-no», написал только программу шифрования и уволился. И теперь агенты не могут понять, что же они написали друг другу. Помогите им.

# Пример:

# Введите зашифрованное сообщение: shacnidw
# Расшифрованное сообщение: sandwich


# print('Задача 10. Метод бутерброда\n')

# text = 'shacnidw'
# result = ''
# temp = ''

# for i in range(0, len(text), 2): 
#   result += text[i]

# for i in range(1, len(text), 2):
#   temp += text[i]

# i = len(temp)
# while i > 0:
#   result += temp[i - 1]
#   i -= 1 

# if len(text) == len(result):
#   print(result)