# Задача 1. Космическая еда


# Что нужно сделать

# Ваш космический корабль потерпел крушение на пустынной планете. Еда здесь не растёт, но вы спасли из обломков 100-килограммовый мешок гречки. Из прошлого опыта вы знаете, что если будете экономно питаться, то у вас будет уходить по четыре килограмма гречки в месяц.

# Чтобы прикинуть гречневый бюджет, вы решили написать программу, которая выведет информацию о том, сколько килограммов гречки у вас должно быть в запасе через месяц, два и так далее, пока она не закончится. Используйте цикл for.

# print('Задача 1. Космическая еда\n')

# month = 0

# for num in range(100 - 4, -1, -4):
#   month += 1
#   if num > 0:
#     print('Через {} месяц остаток еды = {}'.format(month, num))
#   elif num == 0:
#     print('Еда закончилась на {} месяце'.format(month))



# Задача 2. Долги


# Что нужно сделать

# «МирПрогБанк» наконец-то разделил законопослушных граждан и должников и поместил их в разные базы. Но банк не торопится сильно давить на неплательщиков. Операторам банка дали задание позвонить каждому пятому должнику из списка (нумерация начинается с нуля) и уточнить, какую сумму каждый из них задолжал банку.

# Напишите программу, которая получает данные о количестве должников, а затем спрашивает у каждого пятого (начиная с 0) его долг. В конце выводится общая сумма долгов.


# Пример 1:

# Введите количество должников: 13

# Должник с номером 0

# Сколько должны? 1000

# Должник с номером 5

# Сколько должны? 5000

# Должник с номером 10

# Сколько должны? 2000

# Общая сумма долга: 8000


# Пример 2:

# Введите количество должников: 10

# Должник с номером 0

# Сколько должны? 1000

# Должник с номером 5

# Сколько должны? 5000

# Общая сумма долга: 6000


# debtors = int(input('Введите кол-во должников: '))
# debt_summ = 0

# for i in range(0, debtors, 5 ):
#   user_debt = int(input(('Должник с номером {}\nСколько должны? ').format(i)))
#   debt_summ += user_debt

# print('Общая сумма долга: {}'.format(debt_summ))

# Задача 3. Это будет бомба


# Что нужно сделать

# Мы разрабатываем пошаговую игру по мотивам боевика. Задача центрального персонажа — обезвредить бомбу, которая взорвётся через N секунд. Программа спрашивает пользователя, хочет ли он обезвредить бомбу сейчас.

# Если ответ 0 (то есть «нет»), то счётчик бомбы уменьшается. Если он достиг нуля, то программа выдаёт сообщение «Бомба взорвалась», а если не достиг, то программа снова переспрашивает, не хочет ли игрок обезвредить бомбу, и сообщает, сколько времени осталось до взрыва. Если ответ «да», то программа выводит на экран сообщение о том, что бомба обезврежена за ХХ секунд до взрыва.

#     Задайте время до обнуления таймера.
#     Используйте цикл for.
#     На каждой итерации задавайте персонажу вопрос, хочет ли он сейчас обезвредить бомбу или будет дальше нагнетать атмосферу игры.

# print('Задача 3. Это будет бомба\n')

# for i in range(0, 10 + 1):
#   user_choise = int(input('Хотите обезвредить бомбу? (0 - нет, 1 - да): '))
#   if user_choise == 0 and i != 10:
#     print('до взрыва осталось {} секунд'.format(10 - i))
#   elif i == 10:
#     print('Бомба взорвалась')
#     break
#   elif user_choise == 1:
#     print('до взрыва оставалось {} секунд\nбомба обезврежена'.format(10 - i))
#     break

# Задача 4. Среднее на отрезке


# Что нужно сделать

# Напишите программу, которая считывает с клавиатуры два числа a и b, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a; b], кратных числу c.


# Советы и рекомендации

# Функция range(start, stop) не включает границу stop, останавливается, не доходя до неё.

# print('Задача 4.\n')

# num_a = int(input('Введите число а: '))
# num_b = int(input('Введите число b: '))
# num_с = int(input('Введите число c: '))
# count = 0
# summ = 0

# for i in range(num_a, num_b + 1):
#     if i % num_с == 0:
#         count += 1
#         summ += i

# if count != 0:
#     result = summ / count
#     print('среднее арифметическое на отрезке [a; b]: ', result)
# else:
#     print('делителей на отрезке нет')
    
# Задача 5. Функция 2


# Что нужно сделать

# В прошлый раз мы написали Саше программу, которая считает функцию в каждой точке отрезка и выводит значение на экран. Но теперь ему нужно, чтобы значения считались в обратном порядке. Также Саше важно настроить шаг, с которым он скачет по точкам отрезка.

# Напишите программу, которая получает на вход начало и конец отрезка, а также шаг. Затем высчитывает функцию игрек в каждой точке отрезка и с нужным шагом, начиная с конца, выводит ответ на экран.


# Сама функция выглядит так:

# y= x3+2∙x2-4∙x+1


# Пример:

# Введите начало отрезка: -2

# Введите конец отрезка: 2

# Введите шаг: -1

# В точке 2 функция равна 9

# В точке 1 функция равна 0

# В точке 0 функция равна 1

# В точке -1 функция равна 6

# В точке -2 функция равна 9


# Советы и рекомендации

# Функция range(start, stop) не включает границу stop, останавливается, не доходя до неё.

# print('Задача 5. Функция 2\n')

# start = int(input('Введите число начала отрезка: '))
# stop = int(input('Введите число конца отрезка: '))
# step = int(input('Введите шаг: '))
# y = 0

# for x in range(stop, start - 1, step):
#   y = x ** 3 + (2 * (x ** 2)) - (4 * x) + 1
#   print('В точке {} функция равна {}'.format(x, y))

# Задача 6. Письмо


# Что нужно сделать

# У нас есть квадратный конверт размера 12х12 сантиметров и письмо на квадратном листе бумаги, которое не помещается в конверт. Напишите программу, которая подскажет, сколько раз нужно сложить письмо пополам, чтобы оно поместилось в конверт. Размеры письма вводятся с клавиатуры.

# print('Задача 6. Письмо\n')

# size = int(input("Введите размер стороны письма: "))
# result = 0

# while size > 12:
#     size /= 2
#     result += 2

# print('лист нужно сложить {} раз'.format(result))

# Задача 7. Стипендия


# Что нужно сделать

# Ежемесячная стипендия студента составляет educational_grant рублей, а расходы на проживание превышают стипендию и составляют expenses рублей в месяц. Рост цен ежемесячно увеличивает расходы на 3%, кроме первого месяца. Составьте программу расчёта суммы денег, которую необходимо получить у родителей один раз в начале обучения, чтобы можно было прожить учебный год (десять месяцев), используя только эти деньги и стипендию.


# Пример:

# Введите стипендию: 10000

# Введите расходы на проживание: 13000


# У родителей необходимо попросить 49030.431

# print('Задача 7. Стипендия\n')

# educational_grant = int(input('Введите размер стипендии в месяц: '))
# expenses = int(input('Введите сумму затрат в месяц: ')) 
# first_exp = expenses
# n = 10
# prev_exp = 0
# educ_count = 0
# year_count = 0

# print('Расходы за первый месяц составляют: {} рублей'.format(expenses))

# for i in range(2, n + 1):
#   prev_exp = expenses
#   expenses += round(expenses * 0.03)
#   year_count += expenses
#   educ_count += educational_grant
#   print('За {} месяц расходы на проживание выросли  {} руб -> {} руб'.format(i, prev_exp, expenses))

# result = (year_count - educ_count) + first_exp - educational_grant

# print('Перед началом учебного года необходимо попросить у родителей {} руб'.format(round(result)))


# Задача 8. Сумма ряда


# Что нужно сделать

# Дано натуральное число N. Напишите программу для вычисления следующей суммы ряда (начиная с единицы):

# Допускается вывод без описания, достаточно вывести сумму ряда.


# Советы и рекомендации

# Обратите внимание: если мы воспользуемся формулой для расчёта члена ряда, то 

# при n = 0, член ряда равен 1;

# при n = 1, мы получим -1/2;

# при n = 2, мы получим 1/4;

# при n = 3, мы получим -1/8.

# print('Задача 8. Сумма ряда\n')

# n = int(input('Введите число n: '))
# summ = 0

# for i in range(0, n + 1): 
#   summ += pow(-1, i) / pow(2, i)

# print('Сумма ряда: ', round(summ, 3))

# Задача 9. Выражение


# Что нужно сделать

# Дано число x. Напишите программу для вычисления следующего выражения:


# Советы и рекомендации

# Обратите внимание на последовательность в числителе и знаменателе. Эта последовательность не является возрастающей арифметической последовательностью 1, 3, 5, 7 … 63 и 2, 4, 6, 8 … 64.


# Допускается вывод без описания, достаточно вывести сумму ряда.

# print('Задача 9. Выражение\n')

# num_thr = 1
# num_fr = 1
# stat = 1
# x = int(input('введите число: '))

# for num in range(1, 7):
#   num_one = 2 ** num - 1
#   num_two = 2 ** num
#   num_thr *= x - num_one
#   num_fr *= x - num_two
#   if num_fr == 0:
#     stat = 0
#     break

# if stat == 1:
#   print(round(num_thr / num_fr))
# else:
#   print(round(stat))


# Задача 10. Кинотеатр


# Что нужно сделать

# X мальчиков и Y девочек пошли в кинотеатр и купили билеты на идущие подряд места в одном ряду. Напишите программу, которая выдаст, как нужно сесть мальчикам и девочкам, чтобы рядом с каждым мальчиком сидела хотя бы одна девочка, а рядом с каждой девочкой — хотя бы один мальчик.

# На вход подаются два числа: количество мальчиков X и количество девочек Y. В ответе выведите какую-нибудь строку, в которой будет ровно X символов B (обозначающих мальчиков) и Y символов G (обозначающих девочек), удовлетворяющую условию задачи. Пробелы между символами выводить не нужно. Если рассадить мальчиков и девочек согласно условию задачи невозможно, выведите строку «Нет решения».


# Пример 1:

# Введите количество мальчиков: 5

# Введите количество девочек: 5

# Ответ: BGBGBGBGBG


# Пример 2:

# Введите количество мальчиков: 5

# Введите количество девочек: 3

# Ответ: BGBGBBGB


# Пример 3:

# Введите количество мальчиков: 100

# Введите количество девочек: 1

# Ответ: Нет решения


# print('Задача 10. Кинотеатр\n')

# boys = int(input('Введите кол-во мальчиков: '))
# girls = int(input('Введите кол-во девочек: '))
# result = ''

# if (boys > 2 * girls) or (girls > 2 * boys):
#     print('нет решения')
# elif boys >= girls:
#   k = boys - girls 
#   for bgb in range(k):
#     result += 'BGB'
#   for bg in range(girls - k):
#     result += 'BG'
# else :
#   k = girls - boys
#   for gbg in range(k):
#     result += 'GBG'
#   for gb in range(boys - k):
#     result += 'GB'
    
# print(result)